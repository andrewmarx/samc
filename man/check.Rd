% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check.R
\name{check}
\alias{check}
\alias{check,RasterLayer,missing-method}
\alias{check,matrix,missing-method}
\alias{check,RasterLayer,RasterLayer-method}
\alias{check,matrix,matrix-method}
\alias{check,samc,RasterLayer-method}
\alias{check,samc,matrix-method}
\title{Check landscape data}
\usage{
check(a, b)

\S4method{check}{RasterLayer,missing}(a)

\S4method{check}{matrix,missing}(a)

\S4method{check}{RasterLayer,RasterLayer}(a, b)

\S4method{check}{matrix,matrix}(a, b)

\S4method{check}{samc,RasterLayer}(a, b)

\S4method{check}{samc,matrix}(a, b)
}
\arguments{
\item{a}{A \code{\link{samc-class}}, \code{\link{matrix}}, or \code{\link[raster]{RasterLayer-class}} object}

\item{b}{A \code{\link{matrix}} or \code{\link[raster]{RasterLayer-class}} object}
}
\value{
See \emph{Details} section.
}
\description{
Check that landscape inputs have valid values and matching properties.
}
\details{
This function is used to ensure that landscape inputs (resistance, absorption,
fidelity, and occupancy) have valid values and the same properties. This includes
checking the CRS (if using RasterLayer inputs), dimensions, and locations of
cells with NA data. It can be used to directly compare two matrices or two
RasterLayers, or it can be used to check a \code{\link{samc-class}} object
against a matrix or RasterLayer.

The function returns \code{TRUE} if the inputs have matching properties. Otherwise,
it will stop execution and print the error message generated by the
compareRaster() function from the raster package. This error will provide
some details about the difference between the two inputs.

Note that the package assumes the different landscape inputs will be the same
type, either matrices or RasterLayers. Mixing RasterLayer data and matrix
data is not supported.
}
\examples{
# "Load" the data. In this case we are using data built into the package.
# In practice, users will likely load raster data using the raster() function
# from the raster package.
res_data <- samc::ex_res_data
abs_data <- samc::ex_abs_data
occ_data <- samc::ex_occ_data


# Make sure our data meets the basic input requirements of the package using
# the check() function.
check(res_data, abs_data)
check(res_data, occ_data)


# Create a `samc-class` object with the resistance and absorption data using
# the samc() function. We use the recipricol of the arithmetic mean for
# calculating the transition matrix. Note, the input data here are matrices,
# not RasterLayers. If using RasterLayers, the latlon parameter must be set.
samc_obj <- samc(res_data, abs_data, tr_fun = function(x) 1/mean(x))


# Convert the occupancy data to probability of occurrence
occ_prob_data <- occ_data / sum(occ_data, na.rm = TRUE)


# Calculate short- and long-term metrics using the analytical functions
short_mort <- mortality(samc_obj, occ_prob_data, time = 50)
short_dist <- distribution(samc_obj, origin = 3, time = 50)
long_disp <- dispersal(samc_obj, occ_prob_data)
visit <- visitation(samc_obj, dest = 4)
surv <- survival(samc_obj)


# Use the map() function to turn vector results into RasterLayer objects.
short_mort_map <- map(samc_obj, short_mort)
short_dist_map <- map(samc_obj, short_dist)
long_disp_map <- map(samc_obj, long_disp)
visit_map <- map(samc_obj, visit)
surv_map <- map(samc_obj, surv)
}
